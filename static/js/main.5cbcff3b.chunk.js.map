{"version":3,"sources":["components/Frase.js","App.js","serviceWorker.js","index.js"],"names":["ContenedorFrase","styled","div","Frase","frase","quote","author","Contenedor","Boton","button","App","useState","guardarFrase","consultarAPI","a","fetch","api","json","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+5BAGA,IAAMA,EAAkBC,IAAOC,IAAV,KAyCNC,EATD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,kBAACJ,EAAD,KACE,4BAAKI,EAAMC,OACX,gCAAMD,EAAME,U,ufCnClB,IAAMC,EAAaN,IAAOC,IAAV,KAOVM,EAAQP,IAAOQ,OAAV,KA2BIC,MAhBf,WAAe,MAEiBC,mBAAS,IAF1B,mBAENP,EAFM,KAECQ,EAFD,KAGPC,EAAY,uCAAG,8BAAAC,EAAA,sEACDC,MAAM,uDADL,cACbC,EADa,gBAECA,EAAIC,OAFL,OAEbb,EAFa,OAGnBQ,EAAaR,EAAM,IAHA,2CAAH,qDAKlB,OACE,kBAACG,EAAD,KACE,kBAAC,EAAD,CAAOH,MAAOA,IACd,kBAACI,EAAD,CAAOU,QAASL,GAAhB,mBCrBcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5cbcff3b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst ContenedorFrase = styled.div`\r\n  padding: 3rem;\r\n  border-radius: 0.5rem;\r\n  background-color: #fff;\r\n  max-width: 600px;\r\n  margin-top: 12rem;\r\n\r\n  h1 {\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    text-aling: center;\r\n    position: relative;\r\n    padding-left: 4rem;\r\n\r\n    &::before {\r\n      content: open-quote;\r\n      font-size: 7rem;\r\n      color: black;\r\n      position: absolute;\r\n      left: -1rem;\r\n      top: -2rem;\r\n    }\r\n  }\r\n  p {\r\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    font-size: 1.4rem;\r\n    font-weight: bold;\r\n    text-aling: right;\r\n    color: #666;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nconst Frase = ({ frase }) => {\r\n  return (\r\n    <ContenedorFrase>\r\n      <h1>{frase.quote}</h1>\r\n      <p>- {frase.author}</p>\r\n    </ContenedorFrase>\r\n  );\r\n};\r\n\r\nexport default Frase;\r\n","import React, { useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport Frase from \"./components/Frase\";\n\nconst Contenedor = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 5rem;\n  flex-direction: column;\n`;\n\nconst Boton = styled.button`\n  background: -webkit-linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%);\n  background-size: 800px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #fff;\n  margin-top: 3rem;\n  padding: 1rem 3rem;\n  font-size: 2rem;\n  border: 2px solid black;\n`;\n\nfunction App() {\n  // State de frases\n  const [frase, guardarFrase] = useState({});\n  const consultarAPI = async () => {\n    const api = await fetch(\"https://breaking-bad-quotes.herokuapp.com/v1/quotes\");\n    const frase = await api.json();\n    guardarFrase(frase[0]);\n  };\n  return (\n    <Contenedor>\n      <Frase frase={frase} />\n      <Boton onClick={consultarAPI}>Obtener Frase</Boton>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}